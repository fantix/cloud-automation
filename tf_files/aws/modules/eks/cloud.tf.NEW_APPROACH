#####
#
# Module to create a new EKS cluster for an existing commons
#
# fauzi@uchicago.edu
#
#####


module "default_pool" {
  source               = "../eks-nodepool/"
  ec2_keyname          = "${var.ec2_keyname}"
  instance_type        = "${var.instance_type}"
  users_policy         = "${var.users_policy}"
  nodepool             = "default"
  vpc_name             = "${var.vpc_name}"
  csoc_cidr            = "${var.csoc_cidr}"
  eks_cluster_endpoint = "${aws_eks_cluster.eks_cluster.endpoint}"
  eks_cluster_ca       = "${aws_eks_cluster.eks_cluster.certificate_authority.0.data}"
  eks_private_subnets  = "${aws_subnet.eks_private.*.id}"
}

module "jupiter_pool" {
  source               = "../eks-nodepool/"
  ec2_keyname          = "${var.ec2_keyname}"
  instance_type        = "${var.instance_type}"
  users_policy         = "${var.users_policy}"
  nodepool             = "jupiter"
  vpc_name             = "${var.vpc_name}"
  csoc_cidr            = "${var.csoc_cidr}"
  eks_cluster_endpoint = "${aws_eks_cluster.eks_cluster.endpoint}"
  eks_cluster_ca       = "${aws_eks_cluster.eks_cluster.certificate_authority.0.data}"
  eks_private_subnets  = "${aws_subnet.eks_private.*.id}"
}




## First thing we need to create is the role that would spin up resources for us 

resource "aws_iam_role" "eks_control_plane_role" {
  name = "${var.vpc_name}_EKS_role"

  assume_role_policy = <<EOF
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": "eks.amazonaws.com"
      },
      "Effect": "Allow",
      "Sid": ""
    }
  ]
}
EOF
}

# Attach policies for said role
resource "aws_iam_role_policy_attachment" "eks-policy-AmazonEKSClusterPolicy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSClusterPolicy"
  role       = "${aws_iam_role.eks_control_plane_role.name}"
}

resource "aws_iam_role_policy_attachment" "eks-policy-AmazonEKSServicePolicy" {
  policy_arn = "arn:aws:iam::aws:policy/AmazonEKSServicePolicy"
  role       = "${aws_iam_role.eks_control_plane_role.name}"
}

# This one must have been created when we deployed the VPC resources
resource "aws_iam_role_policy_attachment" "bucket_write" {
  policy_arn = "arn:aws:iam::${data.aws_caller_identity.current.account_id}:policy/bucket_writer_logs-${var.vpc_name}-gen3"
  role       = "${aws_iam_role.eks_control_plane_role.name}"
}




####
# * aws_eks_cluster.eks_cluster: error creating EKS Cluster (fauziv1): UnsupportedAvailabilityZoneException: Cannot create cluster 'fauziv1' because us-east-1e, the targeted availability zone, does not currently have sufficient capacity to support the cluster. Retry and choose from these availability zones: us-east-1a, us-east-1c, us-east-1d
####
resource "random_shuffle" "az" {
#  input = ["${data.aws_availability_zones.available.names}"] 
  input = ["us-east-1a", "us-east-1c", "us-east-1d"]
  result_count = 3
  count = 1
}



# Assuming that there is only one VPC with the vpc_name
data "aws_vpc" "the_vpc" {
  id = "${element(data.aws_vpcs.vpcs.ids, count.index)}"
}

# The subnet where our cluster will live in 
resource "aws_subnet" "eks_private" {
  #count = 3
  count                   = "${random_shuffle.az.result_count}"
  vpc_id                  = "${data.aws_vpc.the_vpc.id}"
  cidr_block              = "${cidrsubnet(data.aws_vpc.the_vpc.cidr_block, 3 , ( 2 + count.index ))}"
  availability_zone       = "${random_shuffle.az.result[count.index]}"
  map_public_ip_on_launch = false

  tags = "${
    map(
     "Name", "eks_private_${count.index}",
     "Environment", "${var.vpc_name}",
     "Organization", "Basic Service",
     "kubernetes.io/cluster/${var.vpc_name}", "owned",
    )
  }"

  lifecycle {
    # allow user to change tags interactively - ex - new kube-aws cluster
    ignore_changes = ["tags", "availability_zone"]
  }
}

# The subnet where our cluster will live in
#resource "aws_subnet" "eks_private2" {
#  count = 3
#  vpc_id                  = "${data.aws_vpc.the_vpc.id}"
#  cidr_block              = "${cidrsubnet(data.aws_vpc.the_vpc.cidr_block, 4 , ( 4 + count.index ))}"
#  availability_zone       = "${random_shuffle.az.result[count.index]}"
#  map_public_ip_on_launch = false

#  tags = "${
#    map(
#     "Name", "eks_private_${count.index + 3}",
#     "Environment", "${var.vpc_name}",
#     "Organization", "Basic Service",
#     "kubernetes.io/cluster/${var.vpc_name}", "owned",
#    )
#  }"

#  lifecycle {
    # allow user to change tags interactively - ex - new kube-aws cluster
#    ignore_changes = ["tags", "availability_zone"]
#  }
#}


# for the ELB to talk to the worker nodes
resource "aws_subnet" "eks_public" {
  #count                   = 3
  count                   = "${random_shuffle.az.result_count}"
  vpc_id                  = "${data.aws_vpc.the_vpc.id}"
  cidr_block              = "${cidrsubnet(data.aws_vpc.the_vpc.cidr_block, 4 , ( 10 + count.index ))}"
  map_public_ip_on_launch = true
  availability_zone       = "${random_shuffle.az.result[count.index]}"

  # Note: KubernetesCluster tag is required by kube-aws to identify the public subnet for ELBs

  tags = "${
    map(
     "Name", "eks_public_${count.index}",
     "Environment", "${var.vpc_name}",
     "Organization", "Basic Service",
     "kubernetes.io/cluster/${var.vpc_name}", "shared",
     "kubernetes.io/role/elb", "",
     "KubernetesCluster", "${var.vpc_name}",
    )
  }"

  lifecycle {
    # allow user to change tags interactively - ex - new kube-aws cluster
    ignore_changes = ["tags", "availability_zone"]
  }
}



resource "aws_route_table" "eks_private" {
  vpc_id = "${data.aws_vpc.the_vpc.id}"

  route {
    cidr_block  = "0.0.0.0/0"
    instance_id = "${data.aws_instances.squid_proxy.ids[0]}"
  }

  # We want to be able to talk to aws freely, therefore we are allowing 
  # certain stuff overpass the proxy
  route {
    # logs.us-east-1.amazonaws.com
    cidr_block     = "52.0.0.0/8"
    nat_gateway_id = "${data.aws_nat_gateway.the_gateway.id}"
  }
  route {
    # logs.us-east-1.amazonaws.com as well, these guys are not static, therefore whitelist the whole list
    cidr_block     = "54.0.0.0/8"
    nat_gateway_id = "${data.aws_nat_gateway.the_gateway.id}"
  }
  route {
    # .us-east-1.eks.amazonaws.com 
    cidr_block     = "34.192.0.0/10"
    nat_gateway_id = "${data.aws_nat_gateway.the_gateway.id}"
  }

  route {
    # also eks service
    cidr_block     = "18.128.0.0/9"
    nat_gateway_id = "${data.aws_nat_gateway.the_gateway.id}"
  }

  route {
    #from the commons vpc to the csoc vpc via the peering connection
    cidr_block                = "${var.csoc_cidr}"
    vpc_peering_connection_id = "${data.aws_vpc_peering_connection.pc.id}"
  }

  tags {
    Name         = "eks_private"
    Environment  = "${var.vpc_name}"
    Organization = "Basic Service"
  }
}


# Apparently we cannot iterate over the resource, therefore I am querying them after creation
data "aws_subnet_ids" "private" {
  vpc_id = "${data.aws_vpc.the_vpc.id}"
  tags {
    Name = "eks_private_*"
  }
  depends_on = [
    #"aws_subnet.eks_private", "aws_subnet.eks_private2",
    "aws_subnet.eks_private",
  ]
}

resource "aws_route_table_association" "private_kube" {
  #count          = 3
  count          = "${random_shuffle.az.result_count}"
  subnet_id      = "${data.aws_subnet_ids.private.ids[count.index]}"
  route_table_id = "${aws_route_table.eks_private.id}"
  lifecycle {
    # allow user to change tags interactively - ex - new kube-aws cluster
    ignore_changes = ["id", "subnet_id","tags"]
  }
}


resource "aws_vpc_endpoint" "k8s-s3" {
  vpc_id       =  "${data.aws_vpc.the_vpc.id}"
  
  service_name    = "${data.aws_vpc_endpoint_service.s3.service_name}"
  route_table_ids = ["${aws_route_table.eks_private.id}"]
}




resource "aws_security_group" "eks_control_plane_sg" {
  name        = "${var.vpc_name}-control-plane"
  description = "Cluster communication with worker nodes [${var.vpc_name}]"
  vpc_id      = "${data.aws_vpc.the_vpc.id}"

  egress {
    from_port       = 0
    to_port         = 0
    protocol        = "-1"
    cidr_blocks     = ["0.0.0.0/0"]
  }
}





# Apparently we cannot iterate over the resource, therefore I am querying them after creation
data "aws_subnet_ids" "public_kube" {
  vpc_id = "${data.aws_vpc.the_vpc.id}"
  tags {
    Name = "eks_public_*"
  }
  depends_on = [
    "aws_subnet.eks_public",
  ]
}


resource "aws_route_table_association" "public_kube" {
  #count          = 3
  count          = "${random_shuffle.az.result_count}"
  subnet_id      = "${data.aws_subnet_ids.public_kube.ids[count.index]}"
  route_table_id = "${data.aws_route_table.public_kube.id}"

  lifecycle {
    # allow user to change tags interactively - ex - new kube-aws cluster
    ignore_changes = ["id", "subnet_id"]
  }
}

# The actual EKS cluster 

resource "aws_eks_cluster" "eks_cluster" {
  name     = "${var.vpc_name}"
  role_arn = "${aws_iam_role.eks_control_plane_role.arn}"

  vpc_config {
    #subnet_ids  = ["${aws_subnet.eks_private.*.id}", "${aws_subnet.eks_private2.*.id}"]
    subnet_ids  = ["${aws_subnet.eks_private.*.id}"]
#   subnet_ids  = ["${aws_subnet.eks_private_1.id}", "${aws_subnet.eks_private_2.id}", "${aws_subnet.eks_private_3.id}"]
    security_group_ids = ["${aws_security_group.eks_control_plane_sg.id}"]
  }

  depends_on = [
    "aws_iam_role_policy_attachment.eks-policy-AmazonEKSClusterPolicy",
    "aws_iam_role_policy_attachment.eks-policy-AmazonEKSServicePolicy",
    "aws_subnet.eks_private",
    #"aws_subnet.eks_private2",
  ]
}



###############################################
# Worker nodes




# NOTE: At this point, your Kubernetes cluster will have running masters and worker nodes, however, the worker nodes will
# not be able to join the Kubernetes cluster quite yet. The next section has the required Kubernetes configuration to
# enable the worker nodes to join the cluster.

# Required Kubernetes Configuration to Join Worker Nodes
# The EKS service does not provide a cluster-level API parameter or resource to automatically configure the underlying
# Kubernetes cluster to allow worker nodes to join the cluster via AWS IAM role authentication.

# To output an IAM Role authentication ConfigMap from your Terraform configuration:

locals {
  config-map-aws-auth = <<CONFIGMAPAWSAUTH
apiVersion: v1
kind: ConfigMap
metadata:
  name: aws-auth
  namespace: kube-system
data:
  mapRoles: |
    - rolearn: ${module.default_pool.nodepool_role}
      username: system:node:{{EC2PrivateDNSName}}
      groups:
        - system:bootstrappers
        - system:nodes
    - rolearn: ${module.jupiter_pool.nodepool_role}
      username: system:node:{{EC2PrivateDNSName}}
      groups:
        - system:bootstrappers
        - system:nodes
CONFIGMAPAWSAUTH
}



#--------------------------------------------------------------
# We need to have the kubeconfigfile somewhere, even if it is temporaty so we can execute stuff agains the freshly create EKS cluster 
# Legacy stuff ...
# We want to move away from generating output files, and
# instead just publish output variables
#
resource "null_resource" "config_setup" {
   triggers {
    kubeconfig_change  = "${data.template_file.kube_config.rendered}"
 #   config_change = "${data.template_file.configmap.rendered}"
 #   kube_change   = "${data.template_file.kube_vars.rendered}"
  }

  provisioner "local-exec" {
    command = "mkdir -p ${var.vpc_name}_output_EKS; echo '${data.template_file.kube_config.rendered}' >${var.vpc_name}_output_EKS/kubeconfig"
  }

  provisioner "local-exec" {
    command = "echo \"${local.config-map-aws-auth}\" > ${var.vpc_name}_output_EKS/aws-auth-cm.yaml"
  }

  provisioner "local-exec" {
    command = "echo \"${data.template_file.init_cluster.rendered}\" > ${var.vpc_name}_output_EKS/init_cluster.sh"
  }

  provisioner "local-exec" {
    command = "bash ${var.vpc_name}_output_EKS/init_cluster.sh"
  }

  depends_on = [
    "module.default_pool", "module.jupiter_pool",
  ]
}
